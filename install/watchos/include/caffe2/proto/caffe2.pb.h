// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/caffe2.proto

#ifndef PROTOBUF_caffe2_2fproto_2fcaffe2_2eproto__INCLUDED
#define PROTOBUF_caffe2_2fproto_2fcaffe2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto();
void protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto();
void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

class Argument;
class BlobProto;
class DBReaderProto;
class DeviceOption;
class ExecutionStep;
class NetDef;
class OperatorDef;
class PlanDef;
class QTensorProto;
class TensorProto;
class TensorProto_Segment;
class TensorProtos;
class TensorShape;
class TensorShapes;

enum TensorProto_DataType {
  TensorProto_DataType_UNDEFINED = 0,
  TensorProto_DataType_FLOAT = 1,
  TensorProto_DataType_INT32 = 2,
  TensorProto_DataType_BYTE = 3,
  TensorProto_DataType_STRING = 4,
  TensorProto_DataType_BOOL = 5,
  TensorProto_DataType_UINT8 = 6,
  TensorProto_DataType_INT8 = 7,
  TensorProto_DataType_UINT16 = 8,
  TensorProto_DataType_INT16 = 9,
  TensorProto_DataType_INT64 = 10,
  TensorProto_DataType_FLOAT16 = 12,
  TensorProto_DataType_DOUBLE = 13
};
bool TensorProto_DataType_IsValid(int value);
const TensorProto_DataType TensorProto_DataType_DataType_MIN = TensorProto_DataType_UNDEFINED;
const TensorProto_DataType TensorProto_DataType_DataType_MAX = TensorProto_DataType_DOUBLE;
const int TensorProto_DataType_DataType_ARRAYSIZE = TensorProto_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor();
inline const ::std::string& TensorProto_DataType_Name(TensorProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorProto_DataType_descriptor(), value);
}
inline bool TensorProto_DataType_Parse(
    const ::std::string& name, TensorProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorProto_DataType>(
    TensorProto_DataType_descriptor(), name, value);
}
enum DeviceType {
  CPU = 0,
  CUDA = 1,
  MKLDNN = 2,
  ONLY_FOR_TEST = 20901701
};
bool DeviceType_IsValid(int value);
const DeviceType DeviceType_MIN = CPU;
const DeviceType DeviceType_MAX = ONLY_FOR_TEST;
const int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor();
inline const ::std::string& DeviceType_Name(DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceType_descriptor(), value);
}
inline bool DeviceType_Parse(
    const ::std::string& name, DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
// ===================================================================

class TensorProto_Segment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.TensorProto.Segment) */ {
 public:
  TensorProto_Segment();
  virtual ~TensorProto_Segment();

  TensorProto_Segment(const TensorProto_Segment& from);

  inline TensorProto_Segment& operator=(const TensorProto_Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto_Segment& default_instance();

  static const TensorProto_Segment* internal_default_instance();

  void Swap(TensorProto_Segment* other);

  // implements Message ----------------------------------------------

  inline TensorProto_Segment* New() const { return New(NULL); }

  TensorProto_Segment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProto_Segment& from);
  void MergeFrom(const TensorProto_Segment& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorProto_Segment* other);
  void UnsafeMergeFrom(const TensorProto_Segment& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // required int64 end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:caffe2.TensorProto.Segment)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TensorProto_Segment> TensorProto_Segment_default_instance_;

// -------------------------------------------------------------------

class TensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  static const TensorProto* internal_default_instance();

  void Swap(TensorProto* other);

  // implements Message ----------------------------------------------

  inline TensorProto* New() const { return New(NULL); }

  TensorProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorProto* other);
  void UnsafeMergeFrom(const TensorProto& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TensorProto_Segment Segment;

  typedef TensorProto_DataType DataType;
  static const DataType UNDEFINED =
    TensorProto_DataType_UNDEFINED;
  static const DataType FLOAT =
    TensorProto_DataType_FLOAT;
  static const DataType INT32 =
    TensorProto_DataType_INT32;
  static const DataType BYTE =
    TensorProto_DataType_BYTE;
  static const DataType STRING =
    TensorProto_DataType_STRING;
  static const DataType BOOL =
    TensorProto_DataType_BOOL;
  static const DataType UINT8 =
    TensorProto_DataType_UINT8;
  static const DataType INT8 =
    TensorProto_DataType_INT8;
  static const DataType UINT16 =
    TensorProto_DataType_UINT16;
  static const DataType INT16 =
    TensorProto_DataType_INT16;
  static const DataType INT64 =
    TensorProto_DataType_INT64;
  static const DataType FLOAT16 =
    TensorProto_DataType_FLOAT16;
  static const DataType DOUBLE =
    TensorProto_DataType_DOUBLE;
  static inline bool DataType_IsValid(int value) {
    return TensorProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    TensorProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    TensorProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    TensorProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return TensorProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return TensorProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return TensorProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int64 dims = 1;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::google::protobuf::int64 dims(int index) const;
  void set_dims(int index, ::google::protobuf::int64 value);
  void add_dims(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::caffe2::TensorProto_DataType data_type() const;
  void set_data_type(::caffe2::TensorProto_DataType value);

  // repeated float float_data = 3 [packed = true];
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 3;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 4 [packed = true];
  int int32_data_size() const;
  void clear_int32_data();
  static const int kInt32DataFieldNumber = 4;
  ::google::protobuf::int32 int32_data(int index) const;
  void set_int32_data(int index, ::google::protobuf::int32 value);
  void add_int32_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_data();

  // optional bytes byte_data = 5;
  bool has_byte_data() const;
  void clear_byte_data();
  static const int kByteDataFieldNumber = 5;
  const ::std::string& byte_data() const;
  void set_byte_data(const ::std::string& value);
  void set_byte_data(const char* value);
  void set_byte_data(const void* value, size_t size);
  ::std::string* mutable_byte_data();
  ::std::string* release_byte_data();
  void set_allocated_byte_data(::std::string* byte_data);

  // repeated bytes string_data = 6;
  int string_data_size() const;
  void clear_string_data();
  static const int kStringDataFieldNumber = 6;
  const ::std::string& string_data(int index) const;
  ::std::string* mutable_string_data(int index);
  void set_string_data(int index, const ::std::string& value);
  void set_string_data(int index, const char* value);
  void set_string_data(int index, const void* value, size_t size);
  ::std::string* add_string_data();
  void add_string_data(const ::std::string& value);
  void add_string_data(const char* value);
  void add_string_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // repeated double double_data = 9 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 9;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated int64 int64_data = 10 [packed = true];
  int int64_data_size() const;
  void clear_int64_data();
  static const int kInt64DataFieldNumber = 10;
  ::google::protobuf::int64 int64_data(int index) const;
  void set_int64_data(int index, ::google::protobuf::int64 value);
  void add_int64_data(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_data();

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe2.DeviceOption device_detail = 8;
  bool has_device_detail() const;
  void clear_device_detail();
  static const int kDeviceDetailFieldNumber = 8;
  const ::caffe2::DeviceOption& device_detail() const;
  ::caffe2::DeviceOption* mutable_device_detail();
  ::caffe2::DeviceOption* release_device_detail();
  void set_allocated_device_detail(::caffe2::DeviceOption* device_detail);

  // optional .caffe2.TensorProto.Segment segment = 11;
  bool has_segment() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 11;
  const ::caffe2::TensorProto_Segment& segment() const;
  ::caffe2::TensorProto_Segment* mutable_segment();
  ::caffe2::TensorProto_Segment* release_segment();
  void set_allocated_segment(::caffe2::TensorProto_Segment* segment);

  // @@protoc_insertion_point(class_scope:caffe2.TensorProto)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_byte_data();
  inline void clear_has_byte_data();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_device_detail();
  inline void clear_has_device_detail();
  inline void set_has_segment();
  inline void clear_has_segment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_data_;
  mutable int _int32_data_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_data_;
  mutable int _int64_data_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr byte_data_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe2::DeviceOption* device_detail_;
  ::caffe2::TensorProto_Segment* segment_;
  int data_type_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TensorProto> TensorProto_default_instance_;

// -------------------------------------------------------------------

class QTensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.QTensorProto) */ {
 public:
  QTensorProto();
  virtual ~QTensorProto();

  QTensorProto(const QTensorProto& from);

  inline QTensorProto& operator=(const QTensorProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QTensorProto& default_instance();

  static const QTensorProto* internal_default_instance();

  void Swap(QTensorProto* other);

  // implements Message ----------------------------------------------

  inline QTensorProto* New() const { return New(NULL); }

  QTensorProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QTensorProto& from);
  void MergeFrom(const QTensorProto& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QTensorProto* other);
  void UnsafeMergeFrom(const QTensorProto& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dims = 1;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::google::protobuf::int64 dims(int index) const;
  void set_dims(int index, ::google::protobuf::int64 value);
  void add_dims(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // required int32 precision = 2;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 2;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // required double scale = 3;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  double scale() const;
  void set_scale(double value);

  // required double bias = 4;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 4;
  double bias() const;
  void set_bias(double value);

  // required bool is_signed = 5;
  bool has_is_signed() const;
  void clear_is_signed();
  static const int kIsSignedFieldNumber = 5;
  bool is_signed() const;
  void set_is_signed(bool value);

  // repeated int32 data = 6 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  ::google::protobuf::int32 data(int index) const;
  void set_data(int index, ::google::protobuf::int32 value);
  void add_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:caffe2.QTensorProto)
 private:
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_is_signed();
  inline void clear_has_is_signed();
  inline void set_has_name();
  inline void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double scale_;
  ::google::protobuf::int32 precision_;
  bool is_signed_;
  double bias_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QTensorProto> QTensorProto_default_instance_;

// -------------------------------------------------------------------

class TensorProtos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.TensorProtos) */ {
 public:
  TensorProtos();
  virtual ~TensorProtos();

  TensorProtos(const TensorProtos& from);

  inline TensorProtos& operator=(const TensorProtos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProtos& default_instance();

  static const TensorProtos* internal_default_instance();

  void Swap(TensorProtos* other);

  // implements Message ----------------------------------------------

  inline TensorProtos* New() const { return New(NULL); }

  TensorProtos* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProtos& from);
  void MergeFrom(const TensorProtos& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorProtos* other);
  void UnsafeMergeFrom(const TensorProtos& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe2.TensorProto protos = 1;
  int protos_size() const;
  void clear_protos();
  static const int kProtosFieldNumber = 1;
  const ::caffe2::TensorProto& protos(int index) const;
  ::caffe2::TensorProto* mutable_protos(int index);
  ::caffe2::TensorProto* add_protos();
  ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >*
      mutable_protos();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >&
      protos() const;

  // @@protoc_insertion_point(class_scope:caffe2.TensorProtos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto > protos_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TensorProtos> TensorProtos_default_instance_;

// -------------------------------------------------------------------

class TensorShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.TensorShape) */ {
 public:
  TensorShape();
  virtual ~TensorShape();

  TensorShape(const TensorShape& from);

  inline TensorShape& operator=(const TensorShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorShape& default_instance();

  static const TensorShape* internal_default_instance();

  void Swap(TensorShape* other);

  // implements Message ----------------------------------------------

  inline TensorShape* New() const { return New(NULL); }

  TensorShape* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorShape& from);
  void MergeFrom(const TensorShape& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorShape* other);
  void UnsafeMergeFrom(const TensorShape& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dims = 1;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::google::protobuf::int64 dims(int index) const;
  void set_dims(int index, ::google::protobuf::int64 value);
  void add_dims(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::caffe2::TensorProto_DataType data_type() const;
  void set_data_type(::caffe2::TensorProto_DataType value);

  // repeated int32 unknown_dims = 3;
  int unknown_dims_size() const;
  void clear_unknown_dims();
  static const int kUnknownDimsFieldNumber = 3;
  ::google::protobuf::int32 unknown_dims(int index) const;
  void set_unknown_dims(int index, ::google::protobuf::int32 value);
  void add_unknown_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unknown_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unknown_dims();

  // optional bool unknown_shape = 4 [default = false];
  bool has_unknown_shape() const;
  void clear_unknown_shape();
  static const int kUnknownShapeFieldNumber = 4;
  bool unknown_shape() const;
  void set_unknown_shape(bool value);

  // optional string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:caffe2.TensorShape)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_unknown_shape();
  inline void clear_has_unknown_shape();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unknown_dims_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool unknown_shape_;
  int data_type_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TensorShape> TensorShape_default_instance_;

// -------------------------------------------------------------------

class TensorShapes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.TensorShapes) */ {
 public:
  TensorShapes();
  virtual ~TensorShapes();

  TensorShapes(const TensorShapes& from);

  inline TensorShapes& operator=(const TensorShapes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorShapes& default_instance();

  static const TensorShapes* internal_default_instance();

  void Swap(TensorShapes* other);

  // implements Message ----------------------------------------------

  inline TensorShapes* New() const { return New(NULL); }

  TensorShapes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorShapes& from);
  void MergeFrom(const TensorShapes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorShapes* other);
  void UnsafeMergeFrom(const TensorShapes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe2.TensorShape shapes = 1;
  int shapes_size() const;
  void clear_shapes();
  static const int kShapesFieldNumber = 1;
  const ::caffe2::TensorShape& shapes(int index) const;
  ::caffe2::TensorShape* mutable_shapes(int index);
  ::caffe2::TensorShape* add_shapes();
  ::google::protobuf::RepeatedPtrField< ::caffe2::TensorShape >*
      mutable_shapes();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorShape >&
      shapes() const;

  // @@protoc_insertion_point(class_scope:caffe2.TensorShapes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::TensorShape > shapes_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TensorShapes> TensorShapes_default_instance_;

// -------------------------------------------------------------------

class Argument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.Argument) */ {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Argument& default_instance();

  static const Argument* internal_default_instance();

  void Swap(Argument* other);

  // implements Message ----------------------------------------------

  inline Argument* New() const { return New(NULL); }

  Argument* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Argument* other);
  void UnsafeMergeFrom(const Argument& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float f = 2;
  bool has_f() const;
  void clear_f();
  static const int kFFieldNumber = 2;
  float f() const;
  void set_f(float value);

  // optional int64 i = 3;
  bool has_i() const;
  void clear_i();
  static const int kIFieldNumber = 3;
  ::google::protobuf::int64 i() const;
  void set_i(::google::protobuf::int64 value);

  // optional bytes s = 4;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 4;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // repeated float floats = 5;
  int floats_size() const;
  void clear_floats();
  static const int kFloatsFieldNumber = 5;
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::google::protobuf::RepeatedField< float >&
      floats() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_floats();

  // repeated int64 ints = 6;
  int ints_size() const;
  void clear_ints();
  static const int kIntsFieldNumber = 6;
  ::google::protobuf::int64 ints(int index) const;
  void set_ints(int index, ::google::protobuf::int64 value);
  void add_ints(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ints();

  // repeated bytes strings = 7;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 7;
  const ::std::string& strings(int index) const;
  ::std::string* mutable_strings(int index);
  void set_strings(int index, const ::std::string& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const void* value, size_t size);
  ::std::string* add_strings();
  void add_strings(const ::std::string& value);
  void add_strings(const char* value);
  void add_strings(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // @@protoc_insertion_point(class_scope:caffe2.Argument)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_f();
  inline void clear_has_f();
  inline void set_has_i();
  inline void clear_has_i();
  inline void set_has_s();
  inline void clear_has_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > floats_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ints_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  ::google::protobuf::int64 i_;
  float f_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Argument> Argument_default_instance_;

// -------------------------------------------------------------------

class DeviceOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.DeviceOption) */ {
 public:
  DeviceOption();
  virtual ~DeviceOption();

  DeviceOption(const DeviceOption& from);

  inline DeviceOption& operator=(const DeviceOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceOption& default_instance();

  static const DeviceOption* internal_default_instance();

  void Swap(DeviceOption* other);

  // implements Message ----------------------------------------------

  inline DeviceOption* New() const { return New(NULL); }

  DeviceOption* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceOption& from);
  void MergeFrom(const DeviceOption& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceOption* other);
  void UnsafeMergeFrom(const DeviceOption& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 device_type = 1 [default = 0];
  bool has_device_type() const;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 1;
  ::google::protobuf::int32 device_type() const;
  void set_device_type(::google::protobuf::int32 value);

  // optional int32 cuda_gpu_id = 2;
  bool has_cuda_gpu_id() const;
  void clear_cuda_gpu_id();
  static const int kCudaGpuIdFieldNumber = 2;
  ::google::protobuf::int32 cuda_gpu_id() const;
  void set_cuda_gpu_id(::google::protobuf::int32 value);

  // optional uint32 random_seed = 3;
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 3;
  ::google::protobuf::uint32 random_seed() const;
  void set_random_seed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe2.DeviceOption)
 private:
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_cuda_gpu_id();
  inline void clear_has_cuda_gpu_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 device_type_;
  ::google::protobuf::int32 cuda_gpu_id_;
  ::google::protobuf::uint32 random_seed_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DeviceOption> DeviceOption_default_instance_;

// -------------------------------------------------------------------

class OperatorDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.OperatorDef) */ {
 public:
  OperatorDef();
  virtual ~OperatorDef();

  OperatorDef(const OperatorDef& from);

  inline OperatorDef& operator=(const OperatorDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorDef& default_instance();

  static const OperatorDef* internal_default_instance();

  void Swap(OperatorDef* other);

  // implements Message ----------------------------------------------

  inline OperatorDef* New() const { return New(NULL); }

  OperatorDef* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatorDef& from);
  void MergeFrom(const OperatorDef& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OperatorDef* other);
  void UnsafeMergeFrom(const OperatorDef& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input = 1;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 2;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output(int index) const;
  ::std::string* mutable_output(int index);
  void set_output(int index, const ::std::string& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  ::std::string* add_output();
  void add_output(const ::std::string& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // repeated .caffe2.Argument arg = 5;
  int arg_size() const;
  void clear_arg();
  static const int kArgFieldNumber = 5;
  const ::caffe2::Argument& arg(int index) const;
  ::caffe2::Argument* mutable_arg(int index);
  ::caffe2::Argument* add_arg();
  ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
      mutable_arg();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
      arg() const;

  // optional .caffe2.DeviceOption device_option = 6;
  bool has_device_option() const;
  void clear_device_option();
  static const int kDeviceOptionFieldNumber = 6;
  const ::caffe2::DeviceOption& device_option() const;
  ::caffe2::DeviceOption* mutable_device_option();
  ::caffe2::DeviceOption* release_device_option();
  void set_allocated_device_option(::caffe2::DeviceOption* device_option);

  // optional string engine = 7;
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 7;
  const ::std::string& engine() const;
  void set_engine(const ::std::string& value);
  void set_engine(const char* value);
  void set_engine(const char* value, size_t size);
  ::std::string* mutable_engine();
  ::std::string* release_engine();
  void set_allocated_engine(::std::string* engine);

  // repeated string control_input = 8;
  int control_input_size() const;
  void clear_control_input();
  static const int kControlInputFieldNumber = 8;
  const ::std::string& control_input(int index) const;
  ::std::string* mutable_control_input(int index);
  void set_control_input(int index, const ::std::string& value);
  void set_control_input(int index, const char* value);
  void set_control_input(int index, const char* value, size_t size);
  ::std::string* add_control_input();
  void add_control_input(const ::std::string& value);
  void add_control_input(const char* value);
  void add_control_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& control_input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_control_input();

  // optional bool is_gradient_op = 9 [default = false];
  bool has_is_gradient_op() const;
  void clear_is_gradient_op();
  static const int kIsGradientOpFieldNumber = 9;
  bool is_gradient_op() const;
  void set_is_gradient_op(bool value);

  // @@protoc_insertion_point(class_scope:caffe2.OperatorDef)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_device_option();
  inline void clear_has_device_option();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_is_gradient_op();
  inline void clear_has_is_gradient_op();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::Argument > arg_;
  ::google::protobuf::RepeatedPtrField< ::std::string> control_input_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr engine_;
  ::caffe2::DeviceOption* device_option_;
  bool is_gradient_op_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OperatorDef> OperatorDef_default_instance_;

// -------------------------------------------------------------------

class NetDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.NetDef) */ {
 public:
  NetDef();
  virtual ~NetDef();

  NetDef(const NetDef& from);

  inline NetDef& operator=(const NetDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetDef& default_instance();

  static const NetDef* internal_default_instance();

  void Swap(NetDef* other);

  // implements Message ----------------------------------------------

  inline NetDef* New() const { return New(NULL); }

  NetDef* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetDef& from);
  void MergeFrom(const NetDef& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetDef* other);
  void UnsafeMergeFrom(const NetDef& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .caffe2.OperatorDef op = 2;
  int op_size() const;
  void clear_op();
  static const int kOpFieldNumber = 2;
  const ::caffe2::OperatorDef& op(int index) const;
  ::caffe2::OperatorDef* mutable_op(int index);
  ::caffe2::OperatorDef* add_op();
  ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >*
      mutable_op();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >&
      op() const;

  // optional string type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional int32 num_workers = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_num_workers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_num_workers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kNumWorkersFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 num_workers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_num_workers(::google::protobuf::int32 value);

  // optional .caffe2.DeviceOption device_option = 5;
  bool has_device_option() const;
  void clear_device_option();
  static const int kDeviceOptionFieldNumber = 5;
  const ::caffe2::DeviceOption& device_option() const;
  ::caffe2::DeviceOption* mutable_device_option();
  ::caffe2::DeviceOption* release_device_option();
  void set_allocated_device_option(::caffe2::DeviceOption* device_option);

  // repeated .caffe2.Argument arg = 6;
  int arg_size() const;
  void clear_arg();
  static const int kArgFieldNumber = 6;
  const ::caffe2::Argument& arg(int index) const;
  ::caffe2::Argument* mutable_arg(int index);
  ::caffe2::Argument* add_arg();
  ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
      mutable_arg();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
      arg() const;

  // repeated string external_input = 7;
  int external_input_size() const;
  void clear_external_input();
  static const int kExternalInputFieldNumber = 7;
  const ::std::string& external_input(int index) const;
  ::std::string* mutable_external_input(int index);
  void set_external_input(int index, const ::std::string& value);
  void set_external_input(int index, const char* value);
  void set_external_input(int index, const char* value, size_t size);
  ::std::string* add_external_input();
  void add_external_input(const ::std::string& value);
  void add_external_input(const char* value);
  void add_external_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& external_input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_external_input();

  // repeated string external_output = 8;
  int external_output_size() const;
  void clear_external_output();
  static const int kExternalOutputFieldNumber = 8;
  const ::std::string& external_output(int index) const;
  ::std::string* mutable_external_output(int index);
  void set_external_output(int index, const ::std::string& value);
  void set_external_output(int index, const char* value);
  void set_external_output(int index, const char* value, size_t size);
  ::std::string* add_external_output();
  void add_external_output(const ::std::string& value);
  void add_external_output(const char* value);
  void add_external_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& external_output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_external_output();

  // @@protoc_insertion_point(class_scope:caffe2.NetDef)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_workers();
  inline void clear_has_num_workers();
  inline void set_has_device_option();
  inline void clear_has_device_option();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef > op_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::Argument > arg_;
  ::google::protobuf::RepeatedPtrField< ::std::string> external_input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> external_output_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe2::DeviceOption* device_option_;
  ::google::protobuf::int32 num_workers_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NetDef> NetDef_default_instance_;

// -------------------------------------------------------------------

class ExecutionStep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.ExecutionStep) */ {
 public:
  ExecutionStep();
  virtual ~ExecutionStep();

  ExecutionStep(const ExecutionStep& from);

  inline ExecutionStep& operator=(const ExecutionStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionStep& default_instance();

  static const ExecutionStep* internal_default_instance();

  void Swap(ExecutionStep* other);

  // implements Message ----------------------------------------------

  inline ExecutionStep* New() const { return New(NULL); }

  ExecutionStep* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionStep& from);
  void MergeFrom(const ExecutionStep& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExecutionStep* other);
  void UnsafeMergeFrom(const ExecutionStep& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .caffe2.ExecutionStep substep = 2;
  int substep_size() const;
  void clear_substep();
  static const int kSubstepFieldNumber = 2;
  const ::caffe2::ExecutionStep& substep(int index) const;
  ::caffe2::ExecutionStep* mutable_substep(int index);
  ::caffe2::ExecutionStep* add_substep();
  ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
      mutable_substep();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
      substep() const;

  // repeated string network = 3;
  int network_size() const;
  void clear_network();
  static const int kNetworkFieldNumber = 3;
  const ::std::string& network(int index) const;
  ::std::string* mutable_network(int index);
  void set_network(int index, const ::std::string& value);
  void set_network(int index, const char* value);
  void set_network(int index, const char* value, size_t size);
  ::std::string* add_network();
  void add_network(const ::std::string& value);
  void add_network(const char* value);
  void add_network(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& network() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_network();

  // optional int64 num_iter = 4;
  bool has_num_iter() const;
  void clear_num_iter();
  static const int kNumIterFieldNumber = 4;
  ::google::protobuf::int64 num_iter() const;
  void set_num_iter(::google::protobuf::int64 value);

  // optional string criteria_network = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_criteria_network() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_criteria_network();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCriteriaNetworkFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& criteria_network() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_criteria_network(const ::std::string& value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_criteria_network(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_criteria_network(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_criteria_network();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_criteria_network();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_criteria_network(::std::string* criteria_network);

  // optional string report_net = 7;
  bool has_report_net() const;
  void clear_report_net();
  static const int kReportNetFieldNumber = 7;
  const ::std::string& report_net() const;
  void set_report_net(const ::std::string& value);
  void set_report_net(const char* value);
  void set_report_net(const char* value, size_t size);
  ::std::string* mutable_report_net();
  ::std::string* release_report_net();
  void set_allocated_report_net(::std::string* report_net);

  // optional int32 report_interval = 8;
  bool has_report_interval() const;
  void clear_report_interval();
  static const int kReportIntervalFieldNumber = 8;
  ::google::protobuf::int32 report_interval() const;
  void set_report_interval(::google::protobuf::int32 value);

  // optional int64 run_every_ms = 11;
  bool has_run_every_ms() const;
  void clear_run_every_ms();
  static const int kRunEveryMsFieldNumber = 11;
  ::google::protobuf::int64 run_every_ms() const;
  void set_run_every_ms(::google::protobuf::int64 value);

  // optional bool concurrent_substeps = 6;
  bool has_concurrent_substeps() const;
  void clear_concurrent_substeps();
  static const int kConcurrentSubstepsFieldNumber = 6;
  bool concurrent_substeps() const;
  void set_concurrent_substeps(bool value);

  // optional string should_stop_blob = 9;
  bool has_should_stop_blob() const;
  void clear_should_stop_blob();
  static const int kShouldStopBlobFieldNumber = 9;
  const ::std::string& should_stop_blob() const;
  void set_should_stop_blob(const ::std::string& value);
  void set_should_stop_blob(const char* value);
  void set_should_stop_blob(const char* value, size_t size);
  ::std::string* mutable_should_stop_blob();
  ::std::string* release_should_stop_blob();
  void set_allocated_should_stop_blob(::std::string* should_stop_blob);

  // optional bool only_once = 10;
  bool has_only_once() const;
  void clear_only_once();
  static const int kOnlyOnceFieldNumber = 10;
  bool only_once() const;
  void set_only_once(bool value);

  // @@protoc_insertion_point(class_scope:caffe2.ExecutionStep)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num_iter();
  inline void clear_has_num_iter();
  inline void set_has_criteria_network();
  inline void clear_has_criteria_network();
  inline void set_has_report_net();
  inline void clear_has_report_net();
  inline void set_has_report_interval();
  inline void clear_has_report_interval();
  inline void set_has_run_every_ms();
  inline void clear_has_run_every_ms();
  inline void set_has_concurrent_substeps();
  inline void clear_has_concurrent_substeps();
  inline void set_has_should_stop_blob();
  inline void clear_has_should_stop_blob();
  inline void set_has_only_once();
  inline void clear_has_only_once();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep > substep_;
  ::google::protobuf::RepeatedPtrField< ::std::string> network_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr criteria_network_;
  ::google::protobuf::internal::ArenaStringPtr report_net_;
  ::google::protobuf::internal::ArenaStringPtr should_stop_blob_;
  ::google::protobuf::int64 num_iter_;
  ::google::protobuf::int64 run_every_ms_;
  ::google::protobuf::int32 report_interval_;
  bool concurrent_substeps_;
  bool only_once_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ExecutionStep> ExecutionStep_default_instance_;

// -------------------------------------------------------------------

class PlanDef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.PlanDef) */ {
 public:
  PlanDef();
  virtual ~PlanDef();

  PlanDef(const PlanDef& from);

  inline PlanDef& operator=(const PlanDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanDef& default_instance();

  static const PlanDef* internal_default_instance();

  void Swap(PlanDef* other);

  // implements Message ----------------------------------------------

  inline PlanDef* New() const { return New(NULL); }

  PlanDef* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanDef& from);
  void MergeFrom(const PlanDef& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlanDef* other);
  void UnsafeMergeFrom(const PlanDef& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .caffe2.NetDef network = 2;
  int network_size() const;
  void clear_network();
  static const int kNetworkFieldNumber = 2;
  const ::caffe2::NetDef& network(int index) const;
  ::caffe2::NetDef* mutable_network(int index);
  ::caffe2::NetDef* add_network();
  ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >*
      mutable_network();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >&
      network() const;

  // repeated .caffe2.ExecutionStep execution_step = 3;
  int execution_step_size() const;
  void clear_execution_step();
  static const int kExecutionStepFieldNumber = 3;
  const ::caffe2::ExecutionStep& execution_step(int index) const;
  ::caffe2::ExecutionStep* mutable_execution_step(int index);
  ::caffe2::ExecutionStep* add_execution_step();
  ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
      mutable_execution_step();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
      execution_step() const;

  // @@protoc_insertion_point(class_scope:caffe2.PlanDef)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef > network_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep > execution_step_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PlanDef> PlanDef_default_instance_;

// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  static const BlobProto* internal_default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  inline BlobProto* New() const { return New(NULL); }

  BlobProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlobProto* other);
  void UnsafeMergeFrom(const BlobProto& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .caffe2.TensorProto tensor = 3;
  bool has_tensor() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 3;
  const ::caffe2::TensorProto& tensor() const;
  ::caffe2::TensorProto* mutable_tensor();
  ::caffe2::TensorProto* release_tensor();
  void set_allocated_tensor(::caffe2::TensorProto* tensor);

  // optional bytes content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional .caffe2.QTensorProto qtensor = 5;
  bool has_qtensor() const;
  void clear_qtensor();
  static const int kQtensorFieldNumber = 5;
  const ::caffe2::QTensorProto& qtensor() const;
  ::caffe2::QTensorProto* mutable_qtensor();
  ::caffe2::QTensorProto* release_qtensor();
  void set_allocated_qtensor(::caffe2::QTensorProto* qtensor);

  // @@protoc_insertion_point(class_scope:caffe2.BlobProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tensor();
  inline void clear_has_tensor();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_qtensor();
  inline void clear_has_qtensor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::caffe2::TensorProto* tensor_;
  ::caffe2::QTensorProto* qtensor_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BlobProto> BlobProto_default_instance_;

// -------------------------------------------------------------------

class DBReaderProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.DBReaderProto) */ {
 public:
  DBReaderProto();
  virtual ~DBReaderProto();

  DBReaderProto(const DBReaderProto& from);

  inline DBReaderProto& operator=(const DBReaderProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBReaderProto& default_instance();

  static const DBReaderProto* internal_default_instance();

  void Swap(DBReaderProto* other);

  // implements Message ----------------------------------------------

  inline DBReaderProto* New() const { return New(NULL); }

  DBReaderProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBReaderProto& from);
  void MergeFrom(const DBReaderProto& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBReaderProto* other);
  void UnsafeMergeFrom(const DBReaderProto& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string source = 2;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string db_type = 3;
  bool has_db_type() const;
  void clear_db_type();
  static const int kDbTypeFieldNumber = 3;
  const ::std::string& db_type() const;
  void set_db_type(const ::std::string& value);
  void set_db_type(const char* value);
  void set_db_type(const char* value, size_t size);
  ::std::string* mutable_db_type();
  ::std::string* release_db_type();
  void set_allocated_db_type(::std::string* db_type);

  // optional string key = 4;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:caffe2.DBReaderProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_db_type();
  inline void clear_has_db_type();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr db_type_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_InitDefaults_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void  protobuf_AddDesc_caffe2_2fproto_2fcaffe2_2eproto_impl();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fcaffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fcaffe2_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DBReaderProto> DBReaderProto_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorProto_Segment

// required int64 begin = 1;
inline bool TensorProto_Segment::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorProto_Segment::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorProto_Segment::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorProto_Segment::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::int64 TensorProto_Segment::begin() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.Segment.begin)
  return begin_;
}
inline void TensorProto_Segment::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.Segment.begin)
}

// required int64 end = 2;
inline bool TensorProto_Segment::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto_Segment::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto_Segment::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto_Segment::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 TensorProto_Segment::end() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.Segment.end)
  return end_;
}
inline void TensorProto_Segment::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.Segment.end)
}

inline const TensorProto_Segment* TensorProto_Segment::internal_default_instance() {
  return &TensorProto_Segment_default_instance_.get();
}
// -------------------------------------------------------------------

// TensorProto

// repeated int64 dims = 1;
inline int TensorProto::dims_size() const {
  return dims_.size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.dims)
  return dims_.Get(index);
}
inline void TensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.dims)
}
inline void TensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.dims)
  return &dims_;
}

// optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
inline bool TensorProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::caffe2::TensorProto_DataType TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.data_type)
  return static_cast< ::caffe2::TensorProto_DataType >(data_type_);
}
inline void TensorProto::set_data_type(::caffe2::TensorProto_DataType value) {
  assert(::caffe2::TensorProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.data_type)
}

// repeated float float_data = 3 [packed = true];
inline int TensorProto::float_data_size() const {
  return float_data_.size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.float_data)
  return float_data_.Get(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.float_data)
}
inline void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 4 [packed = true];
inline int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.int32_data)
  return int32_data_.Get(index);
}
inline void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.int32_data)
}
inline void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.int32_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.int32_data)
  return int32_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.int32_data)
  return &int32_data_;
}

// optional bytes byte_data = 5;
inline bool TensorProto::has_byte_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TensorProto::set_has_byte_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TensorProto::clear_has_byte_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TensorProto::clear_byte_data() {
  byte_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_byte_data();
}
inline const ::std::string& TensorProto::byte_data() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.byte_data)
  return byte_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_byte_data(const ::std::string& value) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.byte_data)
}
inline void TensorProto::set_byte_data(const char* value) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.byte_data)
}
inline void TensorProto::set_byte_data(const void* value, size_t size) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.byte_data)
}
inline ::std::string* TensorProto::mutable_byte_data() {
  set_has_byte_data();
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.byte_data)
  return byte_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_byte_data() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.byte_data)
  clear_has_byte_data();
  return byte_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_byte_data(::std::string* byte_data) {
  if (byte_data != NULL) {
    set_has_byte_data();
  } else {
    clear_has_byte_data();
  }
  byte_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byte_data);
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.byte_data)
}

// repeated bytes string_data = 6;
inline int TensorProto::string_data_size() const {
  return string_data_.size();
}
inline void TensorProto::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.string_data)
  return string_data_.Get(index);
}
inline ::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.string_data)
  return string_data_.Mutable(index);
}
inline void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
inline void TensorProto::set_string_data(int index, const char* value) {
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.string_data)
}
inline void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.string_data)
}
inline ::std::string* TensorProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.TensorProto.string_data)
  return string_data_.Add();
}
inline void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const char* value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.TensorProto.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.string_data)
  return &string_data_;
}

// repeated double double_data = 9 [packed = true];
inline int TensorProto::double_data_size() const {
  return double_data_.size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.double_data)
  return double_data_.Get(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.double_data)
}
inline void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.double_data)
  return &double_data_;
}

// repeated int64 int64_data = 10 [packed = true];
inline int TensorProto::int64_data_size() const {
  return int64_data_.size();
}
inline void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
inline ::google::protobuf::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.int64_data)
  return int64_data_.Get(index);
}
inline void TensorProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.int64_data)
}
inline void TensorProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.int64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.int64_data)
  return int64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.int64_data)
  return &int64_data_;
}

// optional string name = 7;
inline bool TensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.name)
}
inline void TensorProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.name)
}
inline void TensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.name)
}
inline ::std::string* TensorProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.name)
}

// optional .caffe2.DeviceOption device_detail = 8;
inline bool TensorProto::has_device_detail() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TensorProto::set_has_device_detail() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TensorProto::clear_has_device_detail() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TensorProto::clear_device_detail() {
  if (device_detail_ != NULL) device_detail_->::caffe2::DeviceOption::Clear();
  clear_has_device_detail();
}
inline const ::caffe2::DeviceOption& TensorProto::device_detail() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.device_detail)
  return device_detail_ != NULL ? *device_detail_
                         : *::caffe2::DeviceOption::internal_default_instance();
}
inline ::caffe2::DeviceOption* TensorProto::mutable_device_detail() {
  set_has_device_detail();
  if (device_detail_ == NULL) {
    device_detail_ = new ::caffe2::DeviceOption;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.device_detail)
  return device_detail_;
}
inline ::caffe2::DeviceOption* TensorProto::release_device_detail() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.device_detail)
  clear_has_device_detail();
  ::caffe2::DeviceOption* temp = device_detail_;
  device_detail_ = NULL;
  return temp;
}
inline void TensorProto::set_allocated_device_detail(::caffe2::DeviceOption* device_detail) {
  delete device_detail_;
  device_detail_ = device_detail;
  if (device_detail) {
    set_has_device_detail();
  } else {
    clear_has_device_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.device_detail)
}

// optional .caffe2.TensorProto.Segment segment = 11;
inline bool TensorProto::has_segment() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TensorProto::set_has_segment() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TensorProto::clear_has_segment() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TensorProto::clear_segment() {
  if (segment_ != NULL) segment_->::caffe2::TensorProto_Segment::Clear();
  clear_has_segment();
}
inline const ::caffe2::TensorProto_Segment& TensorProto::segment() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.segment)
  return segment_ != NULL ? *segment_
                         : *::caffe2::TensorProto_Segment::internal_default_instance();
}
inline ::caffe2::TensorProto_Segment* TensorProto::mutable_segment() {
  set_has_segment();
  if (segment_ == NULL) {
    segment_ = new ::caffe2::TensorProto_Segment;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.segment)
  return segment_;
}
inline ::caffe2::TensorProto_Segment* TensorProto::release_segment() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.segment)
  clear_has_segment();
  ::caffe2::TensorProto_Segment* temp = segment_;
  segment_ = NULL;
  return temp;
}
inline void TensorProto::set_allocated_segment(::caffe2::TensorProto_Segment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    set_has_segment();
  } else {
    clear_has_segment();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.segment)
}

inline const TensorProto* TensorProto::internal_default_instance() {
  return &TensorProto_default_instance_.get();
}
// -------------------------------------------------------------------

// QTensorProto

// repeated int64 dims = 1;
inline int QTensorProto::dims_size() const {
  return dims_.size();
}
inline void QTensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 QTensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.dims)
  return dims_.Get(index);
}
inline void QTensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.dims)
}
inline void QTensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.QTensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QTensorProto::dims() const {
  // @@protoc_insertion_point(field_list:caffe2.QTensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QTensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.QTensorProto.dims)
  return &dims_;
}

// required int32 precision = 2;
inline bool QTensorProto::has_precision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QTensorProto::set_has_precision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QTensorProto::clear_has_precision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QTensorProto::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 QTensorProto::precision() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.precision)
  return precision_;
}
inline void QTensorProto::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.precision)
}

// required double scale = 3;
inline bool QTensorProto::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QTensorProto::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QTensorProto::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QTensorProto::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline double QTensorProto::scale() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.scale)
  return scale_;
}
inline void QTensorProto::set_scale(double value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.scale)
}

// required double bias = 4;
inline bool QTensorProto::has_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QTensorProto::set_has_bias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QTensorProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QTensorProto::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline double QTensorProto::bias() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.bias)
  return bias_;
}
inline void QTensorProto::set_bias(double value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.bias)
}

// required bool is_signed = 5;
inline bool QTensorProto::has_is_signed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QTensorProto::set_has_is_signed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QTensorProto::clear_has_is_signed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QTensorProto::clear_is_signed() {
  is_signed_ = false;
  clear_has_is_signed();
}
inline bool QTensorProto::is_signed() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.is_signed)
  return is_signed_;
}
inline void QTensorProto::set_is_signed(bool value) {
  set_has_is_signed();
  is_signed_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.is_signed)
}

// repeated int32 data = 6 [packed = true];
inline int QTensorProto::data_size() const {
  return data_.size();
}
inline void QTensorProto::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 QTensorProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.data)
  return data_.Get(index);
}
inline void QTensorProto::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.data)
}
inline void QTensorProto::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.QTensorProto.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QTensorProto::data() const {
  // @@protoc_insertion_point(field_list:caffe2.QTensorProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QTensorProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.QTensorProto.data)
  return &data_;
}

// optional string name = 7;
inline bool QTensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QTensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QTensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QTensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& QTensorProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QTensorProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.name)
}
inline void QTensorProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.QTensorProto.name)
}
inline void QTensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.QTensorProto.name)
}
inline ::std::string* QTensorProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.QTensorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QTensorProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.QTensorProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QTensorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.QTensorProto.name)
}

inline const QTensorProto* QTensorProto::internal_default_instance() {
  return &QTensorProto_default_instance_.get();
}
// -------------------------------------------------------------------

// TensorProtos

// repeated .caffe2.TensorProto protos = 1;
inline int TensorProtos::protos_size() const {
  return protos_.size();
}
inline void TensorProtos::clear_protos() {
  protos_.Clear();
}
inline const ::caffe2::TensorProto& TensorProtos::protos(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProtos.protos)
  return protos_.Get(index);
}
inline ::caffe2::TensorProto* TensorProtos::mutable_protos(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProtos.protos)
  return protos_.Mutable(index);
}
inline ::caffe2::TensorProto* TensorProtos::add_protos() {
  // @@protoc_insertion_point(field_add:caffe2.TensorProtos.protos)
  return protos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >*
TensorProtos::mutable_protos() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProtos.protos)
  return &protos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >&
TensorProtos::protos() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProtos.protos)
  return protos_;
}

inline const TensorProtos* TensorProtos::internal_default_instance() {
  return &TensorProtos_default_instance_.get();
}
// -------------------------------------------------------------------

// TensorShape

// repeated int64 dims = 1;
inline int TensorShape::dims_size() const {
  return dims_.size();
}
inline void TensorShape::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 TensorShape::dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.dims)
  return dims_.Get(index);
}
inline void TensorShape::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.dims)
}
inline void TensorShape::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorShape.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorShape::dims() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorShape.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorShape::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorShape.dims)
  return &dims_;
}

// optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
inline bool TensorShape::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorShape::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorShape::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorShape::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::caffe2::TensorProto_DataType TensorShape::data_type() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.data_type)
  return static_cast< ::caffe2::TensorProto_DataType >(data_type_);
}
inline void TensorShape::set_data_type(::caffe2::TensorProto_DataType value) {
  assert(::caffe2::TensorProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.data_type)
}

// repeated int32 unknown_dims = 3;
inline int TensorShape::unknown_dims_size() const {
  return unknown_dims_.size();
}
inline void TensorShape::clear_unknown_dims() {
  unknown_dims_.Clear();
}
inline ::google::protobuf::int32 TensorShape::unknown_dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.unknown_dims)
  return unknown_dims_.Get(index);
}
inline void TensorShape::set_unknown_dims(int index, ::google::protobuf::int32 value) {
  unknown_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.unknown_dims)
}
inline void TensorShape::add_unknown_dims(::google::protobuf::int32 value) {
  unknown_dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorShape.unknown_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorShape::unknown_dims() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorShape.unknown_dims)
  return unknown_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorShape::mutable_unknown_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorShape.unknown_dims)
  return &unknown_dims_;
}

// optional bool unknown_shape = 4 [default = false];
inline bool TensorShape::has_unknown_shape() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TensorShape::set_has_unknown_shape() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TensorShape::clear_has_unknown_shape() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TensorShape::clear_unknown_shape() {
  unknown_shape_ = false;
  clear_has_unknown_shape();
}
inline bool TensorShape::unknown_shape() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.unknown_shape)
  return unknown_shape_;
}
inline void TensorShape::set_unknown_shape(bool value) {
  set_has_unknown_shape();
  unknown_shape_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.unknown_shape)
}

// optional string name = 5;
inline bool TensorShape::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TensorShape::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TensorShape::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TensorShape::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TensorShape::name() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorShape::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.name)
}
inline void TensorShape::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.TensorShape.name)
}
inline void TensorShape::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorShape.name)
}
inline ::std::string* TensorShape::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.TensorShape.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorShape::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.TensorShape.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorShape::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorShape.name)
}

inline const TensorShape* TensorShape::internal_default_instance() {
  return &TensorShape_default_instance_.get();
}
// -------------------------------------------------------------------

// TensorShapes

// repeated .caffe2.TensorShape shapes = 1;
inline int TensorShapes::shapes_size() const {
  return shapes_.size();
}
inline void TensorShapes::clear_shapes() {
  shapes_.Clear();
}
inline const ::caffe2::TensorShape& TensorShapes::shapes(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShapes.shapes)
  return shapes_.Get(index);
}
inline ::caffe2::TensorShape* TensorShapes::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorShapes.shapes)
  return shapes_.Mutable(index);
}
inline ::caffe2::TensorShape* TensorShapes::add_shapes() {
  // @@protoc_insertion_point(field_add:caffe2.TensorShapes.shapes)
  return shapes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::TensorShape >*
TensorShapes::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorShapes.shapes)
  return &shapes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorShape >&
TensorShapes::shapes() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorShapes.shapes)
  return shapes_;
}

inline const TensorShapes* TensorShapes::internal_default_instance() {
  return &TensorShapes_default_instance_.get();
}
// -------------------------------------------------------------------

// Argument

// optional string name = 1;
inline bool Argument::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Argument::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Argument::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Argument::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Argument::name() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.name)
}
inline void Argument::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.name)
}
inline void Argument::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.name)
}
inline ::std::string* Argument::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.Argument.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.Argument.name)
}

// optional float f = 2;
inline bool Argument::has_f() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Argument::set_has_f() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Argument::clear_has_f() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Argument::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline float Argument::f() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.f)
  return f_;
}
inline void Argument::set_f(float value) {
  set_has_f();
  f_ = value;
  // @@protoc_insertion_point(field_set:caffe2.Argument.f)
}

// optional int64 i = 3;
inline bool Argument::has_i() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Argument::set_has_i() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Argument::clear_has_i() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Argument::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
  clear_has_i();
}
inline ::google::protobuf::int64 Argument::i() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.i)
  return i_;
}
inline void Argument::set_i(::google::protobuf::int64 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:caffe2.Argument.i)
}

// optional bytes s = 4;
inline bool Argument::has_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Argument::set_has_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Argument::clear_has_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Argument::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s();
}
inline const ::std::string& Argument::s() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.s)
  return s_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_s(const ::std::string& value) {
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.s)
}
inline void Argument::set_s(const char* value) {
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.s)
}
inline void Argument::set_s(const void* value, size_t size) {
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.s)
}
inline ::std::string* Argument::mutable_s() {
  set_has_s();
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_s() {
  // @@protoc_insertion_point(field_release:caffe2.Argument.s)
  clear_has_s();
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    set_has_s();
  } else {
    clear_has_s();
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:caffe2.Argument.s)
}

// repeated float floats = 5;
inline int Argument::floats_size() const {
  return floats_.size();
}
inline void Argument::clear_floats() {
  floats_.Clear();
}
inline float Argument::floats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.floats)
  return floats_.Get(index);
}
inline void Argument::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.floats)
}
inline void Argument::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.floats)
}
inline const ::google::protobuf::RepeatedField< float >&
Argument::floats() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.floats)
  return floats_;
}
inline ::google::protobuf::RepeatedField< float >*
Argument::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.floats)
  return &floats_;
}

// repeated int64 ints = 6;
inline int Argument::ints_size() const {
  return ints_.size();
}
inline void Argument::clear_ints() {
  ints_.Clear();
}
inline ::google::protobuf::int64 Argument::ints(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.ints)
  return ints_.Get(index);
}
inline void Argument::set_ints(int index, ::google::protobuf::int64 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.ints)
}
inline void Argument::add_ints(::google::protobuf::int64 value) {
  ints_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Argument::ints() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.ints)
  return ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Argument::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.ints)
  return &ints_;
}

// repeated bytes strings = 7;
inline int Argument::strings_size() const {
  return strings_.size();
}
inline void Argument::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& Argument::strings(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.strings)
  return strings_.Get(index);
}
inline ::std::string* Argument::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.strings)
  return strings_.Mutable(index);
}
inline void Argument::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.Argument.strings)
  strings_.Mutable(index)->assign(value);
}
inline void Argument::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.strings)
}
inline void Argument::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.strings)
}
inline ::std::string* Argument::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.Argument.strings)
  return strings_.Add();
}
inline void Argument::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.strings)
}
inline void Argument::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.Argument.strings)
}
inline void Argument::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.Argument.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Argument::strings() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Argument::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.strings)
  return &strings_;
}

inline const Argument* Argument::internal_default_instance() {
  return &Argument_default_instance_.get();
}
// -------------------------------------------------------------------

// DeviceOption

// optional int32 device_type = 1 [default = 0];
inline bool DeviceOption::has_device_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceOption::set_has_device_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceOption::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceOption::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::google::protobuf::int32 DeviceOption::device_type() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.device_type)
  return device_type_;
}
inline void DeviceOption::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.device_type)
}

// optional int32 cuda_gpu_id = 2;
inline bool DeviceOption::has_cuda_gpu_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceOption::set_has_cuda_gpu_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceOption::clear_has_cuda_gpu_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceOption::clear_cuda_gpu_id() {
  cuda_gpu_id_ = 0;
  clear_has_cuda_gpu_id();
}
inline ::google::protobuf::int32 DeviceOption::cuda_gpu_id() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.cuda_gpu_id)
  return cuda_gpu_id_;
}
inline void DeviceOption::set_cuda_gpu_id(::google::protobuf::int32 value) {
  set_has_cuda_gpu_id();
  cuda_gpu_id_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.cuda_gpu_id)
}

// optional uint32 random_seed = 3;
inline bool DeviceOption::has_random_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceOption::set_has_random_seed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceOption::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceOption::clear_random_seed() {
  random_seed_ = 0u;
  clear_has_random_seed();
}
inline ::google::protobuf::uint32 DeviceOption::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.random_seed)
  return random_seed_;
}
inline void DeviceOption::set_random_seed(::google::protobuf::uint32 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.random_seed)
}

inline const DeviceOption* DeviceOption::internal_default_instance() {
  return &DeviceOption_default_instance_.get();
}
// -------------------------------------------------------------------

// OperatorDef

// repeated string input = 1;
inline int OperatorDef::input_size() const {
  return input_.size();
}
inline void OperatorDef::clear_input() {
  input_.Clear();
}
inline const ::std::string& OperatorDef::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.input)
  return input_.Get(index);
}
inline ::std::string* OperatorDef::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.input)
  return input_.Mutable(index);
}
inline void OperatorDef::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.input)
  input_.Mutable(index)->assign(value);
}
inline void OperatorDef::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.input)
}
inline void OperatorDef::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.input)
}
inline ::std::string* OperatorDef::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.OperatorDef.input)
  return input_.Add();
}
inline void OperatorDef::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.input)
}
inline void OperatorDef::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.input)
}
inline void OperatorDef::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::input() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.input)
  return &input_;
}

// repeated string output = 2;
inline int OperatorDef::output_size() const {
  return output_.size();
}
inline void OperatorDef::clear_output() {
  output_.Clear();
}
inline const ::std::string& OperatorDef::output(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.output)
  return output_.Get(index);
}
inline ::std::string* OperatorDef::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.output)
  return output_.Mutable(index);
}
inline void OperatorDef::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.output)
  output_.Mutable(index)->assign(value);
}
inline void OperatorDef::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.output)
}
inline void OperatorDef::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.output)
}
inline ::std::string* OperatorDef::add_output() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.OperatorDef.output)
  return output_.Add();
}
inline void OperatorDef::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.output)
}
inline void OperatorDef::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.output)
}
inline void OperatorDef::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::output() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.output)
  return &output_;
}

// optional string name = 3;
inline bool OperatorDef::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperatorDef::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperatorDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperatorDef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OperatorDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorDef::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.name)
}
inline void OperatorDef::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.name)
}
inline void OperatorDef::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.name)
}
inline ::std::string* OperatorDef::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatorDef::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.name)
}

// optional string type = 4;
inline bool OperatorDef::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperatorDef::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperatorDef::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperatorDef::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& OperatorDef::type() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorDef::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.type)
}
inline void OperatorDef::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.type)
}
inline void OperatorDef::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.type)
}
inline ::std::string* OperatorDef::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatorDef::release_type() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorDef::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.type)
}

// repeated .caffe2.Argument arg = 5;
inline int OperatorDef::arg_size() const {
  return arg_.size();
}
inline void OperatorDef::clear_arg() {
  arg_.Clear();
}
inline const ::caffe2::Argument& OperatorDef::arg(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.arg)
  return arg_.Get(index);
}
inline ::caffe2::Argument* OperatorDef::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.arg)
  return arg_.Mutable(index);
}
inline ::caffe2::Argument* OperatorDef::add_arg() {
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.arg)
  return arg_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
OperatorDef::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.arg)
  return &arg_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
OperatorDef::arg() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.arg)
  return arg_;
}

// optional .caffe2.DeviceOption device_option = 6;
inline bool OperatorDef::has_device_option() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OperatorDef::set_has_device_option() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OperatorDef::clear_has_device_option() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OperatorDef::clear_device_option() {
  if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
  clear_has_device_option();
}
inline const ::caffe2::DeviceOption& OperatorDef::device_option() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.device_option)
  return device_option_ != NULL ? *device_option_
                         : *::caffe2::DeviceOption::internal_default_instance();
}
inline ::caffe2::DeviceOption* OperatorDef::mutable_device_option() {
  set_has_device_option();
  if (device_option_ == NULL) {
    device_option_ = new ::caffe2::DeviceOption;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.device_option)
  return device_option_;
}
inline ::caffe2::DeviceOption* OperatorDef::release_device_option() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.device_option)
  clear_has_device_option();
  ::caffe2::DeviceOption* temp = device_option_;
  device_option_ = NULL;
  return temp;
}
inline void OperatorDef::set_allocated_device_option(::caffe2::DeviceOption* device_option) {
  delete device_option_;
  device_option_ = device_option;
  if (device_option) {
    set_has_device_option();
  } else {
    clear_has_device_option();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.device_option)
}

// optional string engine = 7;
inline bool OperatorDef::has_engine() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OperatorDef::set_has_engine() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OperatorDef::clear_has_engine() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OperatorDef::clear_engine() {
  engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_engine();
}
inline const ::std::string& OperatorDef::engine() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.engine)
  return engine_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorDef::set_engine(const ::std::string& value) {
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.engine)
}
inline void OperatorDef::set_engine(const char* value) {
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.engine)
}
inline void OperatorDef::set_engine(const char* value, size_t size) {
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.engine)
}
inline ::std::string* OperatorDef::mutable_engine() {
  set_has_engine();
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.engine)
  return engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatorDef::release_engine() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.engine)
  clear_has_engine();
  return engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorDef::set_allocated_engine(::std::string* engine) {
  if (engine != NULL) {
    set_has_engine();
  } else {
    clear_has_engine();
  }
  engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engine);
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.engine)
}

// repeated string control_input = 8;
inline int OperatorDef::control_input_size() const {
  return control_input_.size();
}
inline void OperatorDef::clear_control_input() {
  control_input_.Clear();
}
inline const ::std::string& OperatorDef::control_input(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.control_input)
  return control_input_.Get(index);
}
inline ::std::string* OperatorDef::mutable_control_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.control_input)
  return control_input_.Mutable(index);
}
inline void OperatorDef::set_control_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.control_input)
  control_input_.Mutable(index)->assign(value);
}
inline void OperatorDef::set_control_input(int index, const char* value) {
  control_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.control_input)
}
inline void OperatorDef::set_control_input(int index, const char* value, size_t size) {
  control_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.control_input)
}
inline ::std::string* OperatorDef::add_control_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.OperatorDef.control_input)
  return control_input_.Add();
}
inline void OperatorDef::add_control_input(const ::std::string& value) {
  control_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.control_input)
}
inline void OperatorDef::add_control_input(const char* value) {
  control_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.control_input)
}
inline void OperatorDef::add_control_input(const char* value, size_t size) {
  control_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.control_input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::control_input() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.control_input)
  return control_input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_control_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.control_input)
  return &control_input_;
}

// optional bool is_gradient_op = 9 [default = false];
inline bool OperatorDef::has_is_gradient_op() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OperatorDef::set_has_is_gradient_op() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OperatorDef::clear_has_is_gradient_op() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OperatorDef::clear_is_gradient_op() {
  is_gradient_op_ = false;
  clear_has_is_gradient_op();
}
inline bool OperatorDef::is_gradient_op() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.is_gradient_op)
  return is_gradient_op_;
}
inline void OperatorDef::set_is_gradient_op(bool value) {
  set_has_is_gradient_op();
  is_gradient_op_ = value;
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.is_gradient_op)
}

inline const OperatorDef* OperatorDef::internal_default_instance() {
  return &OperatorDef_default_instance_.get();
}
// -------------------------------------------------------------------

// NetDef

// optional string name = 1;
inline bool NetDef::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetDef::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetDef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetDef::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.NetDef.name)
}
inline void NetDef::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.name)
}
inline void NetDef::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.name)
}
inline ::std::string* NetDef::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetDef::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.NetDef.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.name)
}

// repeated .caffe2.OperatorDef op = 2;
inline int NetDef::op_size() const {
  return op_.size();
}
inline void NetDef::clear_op() {
  op_.Clear();
}
inline const ::caffe2::OperatorDef& NetDef::op(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.op)
  return op_.Get(index);
}
inline ::caffe2::OperatorDef* NetDef::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.op)
  return op_.Mutable(index);
}
inline ::caffe2::OperatorDef* NetDef::add_op() {
  // @@protoc_insertion_point(field_add:caffe2.NetDef.op)
  return op_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >*
NetDef::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.op)
  return &op_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >&
NetDef::op() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.op)
  return op_;
}

// optional string type = 3;
inline bool NetDef::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetDef::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetDef::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetDef::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& NetDef::type() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetDef::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.NetDef.type)
}
inline void NetDef::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.type)
}
inline void NetDef::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.type)
}
inline ::std::string* NetDef::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetDef::release_type() {
  // @@protoc_insertion_point(field_release:caffe2.NetDef.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetDef::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.type)
}

// optional int32 num_workers = 4 [deprecated = true];
inline bool NetDef::has_num_workers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetDef::set_has_num_workers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetDef::clear_has_num_workers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetDef::clear_num_workers() {
  num_workers_ = 0;
  clear_has_num_workers();
}
inline ::google::protobuf::int32 NetDef::num_workers() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.num_workers)
  return num_workers_;
}
inline void NetDef::set_num_workers(::google::protobuf::int32 value) {
  set_has_num_workers();
  num_workers_ = value;
  // @@protoc_insertion_point(field_set:caffe2.NetDef.num_workers)
}

// optional .caffe2.DeviceOption device_option = 5;
inline bool NetDef::has_device_option() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetDef::set_has_device_option() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetDef::clear_has_device_option() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetDef::clear_device_option() {
  if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
  clear_has_device_option();
}
inline const ::caffe2::DeviceOption& NetDef::device_option() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.device_option)
  return device_option_ != NULL ? *device_option_
                         : *::caffe2::DeviceOption::internal_default_instance();
}
inline ::caffe2::DeviceOption* NetDef::mutable_device_option() {
  set_has_device_option();
  if (device_option_ == NULL) {
    device_option_ = new ::caffe2::DeviceOption;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.device_option)
  return device_option_;
}
inline ::caffe2::DeviceOption* NetDef::release_device_option() {
  // @@protoc_insertion_point(field_release:caffe2.NetDef.device_option)
  clear_has_device_option();
  ::caffe2::DeviceOption* temp = device_option_;
  device_option_ = NULL;
  return temp;
}
inline void NetDef::set_allocated_device_option(::caffe2::DeviceOption* device_option) {
  delete device_option_;
  device_option_ = device_option;
  if (device_option) {
    set_has_device_option();
  } else {
    clear_has_device_option();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.device_option)
}

// repeated .caffe2.Argument arg = 6;
inline int NetDef::arg_size() const {
  return arg_.size();
}
inline void NetDef::clear_arg() {
  arg_.Clear();
}
inline const ::caffe2::Argument& NetDef::arg(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.arg)
  return arg_.Get(index);
}
inline ::caffe2::Argument* NetDef::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.arg)
  return arg_.Mutable(index);
}
inline ::caffe2::Argument* NetDef::add_arg() {
  // @@protoc_insertion_point(field_add:caffe2.NetDef.arg)
  return arg_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
NetDef::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.arg)
  return &arg_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
NetDef::arg() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.arg)
  return arg_;
}

// repeated string external_input = 7;
inline int NetDef::external_input_size() const {
  return external_input_.size();
}
inline void NetDef::clear_external_input() {
  external_input_.Clear();
}
inline const ::std::string& NetDef::external_input(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.external_input)
  return external_input_.Get(index);
}
inline ::std::string* NetDef::mutable_external_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.external_input)
  return external_input_.Mutable(index);
}
inline void NetDef::set_external_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.NetDef.external_input)
  external_input_.Mutable(index)->assign(value);
}
inline void NetDef::set_external_input(int index, const char* value) {
  external_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.external_input)
}
inline void NetDef::set_external_input(int index, const char* value, size_t size) {
  external_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.external_input)
}
inline ::std::string* NetDef::add_external_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.NetDef.external_input)
  return external_input_.Add();
}
inline void NetDef::add_external_input(const ::std::string& value) {
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.NetDef.external_input)
}
inline void NetDef::add_external_input(const char* value) {
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.NetDef.external_input)
}
inline void NetDef::add_external_input(const char* value, size_t size) {
  external_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.NetDef.external_input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetDef::external_input() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.external_input)
  return external_input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetDef::mutable_external_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.external_input)
  return &external_input_;
}

// repeated string external_output = 8;
inline int NetDef::external_output_size() const {
  return external_output_.size();
}
inline void NetDef::clear_external_output() {
  external_output_.Clear();
}
inline const ::std::string& NetDef::external_output(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.external_output)
  return external_output_.Get(index);
}
inline ::std::string* NetDef::mutable_external_output(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.external_output)
  return external_output_.Mutable(index);
}
inline void NetDef::set_external_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.NetDef.external_output)
  external_output_.Mutable(index)->assign(value);
}
inline void NetDef::set_external_output(int index, const char* value) {
  external_output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.external_output)
}
inline void NetDef::set_external_output(int index, const char* value, size_t size) {
  external_output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.external_output)
}
inline ::std::string* NetDef::add_external_output() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.NetDef.external_output)
  return external_output_.Add();
}
inline void NetDef::add_external_output(const ::std::string& value) {
  external_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.NetDef.external_output)
}
inline void NetDef::add_external_output(const char* value) {
  external_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.NetDef.external_output)
}
inline void NetDef::add_external_output(const char* value, size_t size) {
  external_output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.NetDef.external_output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetDef::external_output() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.external_output)
  return external_output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetDef::mutable_external_output() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.external_output)
  return &external_output_;
}

inline const NetDef* NetDef::internal_default_instance() {
  return &NetDef_default_instance_.get();
}
// -------------------------------------------------------------------

// ExecutionStep

// optional string name = 1;
inline bool ExecutionStep::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionStep::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionStep::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionStep::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ExecutionStep::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.name)
}
inline void ExecutionStep::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.name)
}
inline void ExecutionStep::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.name)
}
inline ::std::string* ExecutionStep::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionStep::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.name)
}

// repeated .caffe2.ExecutionStep substep = 2;
inline int ExecutionStep::substep_size() const {
  return substep_.size();
}
inline void ExecutionStep::clear_substep() {
  substep_.Clear();
}
inline const ::caffe2::ExecutionStep& ExecutionStep::substep(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.substep)
  return substep_.Get(index);
}
inline ::caffe2::ExecutionStep* ExecutionStep::mutable_substep(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.substep)
  return substep_.Mutable(index);
}
inline ::caffe2::ExecutionStep* ExecutionStep::add_substep() {
  // @@protoc_insertion_point(field_add:caffe2.ExecutionStep.substep)
  return substep_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
ExecutionStep::mutable_substep() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ExecutionStep.substep)
  return &substep_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
ExecutionStep::substep() const {
  // @@protoc_insertion_point(field_list:caffe2.ExecutionStep.substep)
  return substep_;
}

// repeated string network = 3;
inline int ExecutionStep::network_size() const {
  return network_.size();
}
inline void ExecutionStep::clear_network() {
  network_.Clear();
}
inline const ::std::string& ExecutionStep::network(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.network)
  return network_.Get(index);
}
inline ::std::string* ExecutionStep::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.network)
  return network_.Mutable(index);
}
inline void ExecutionStep::set_network(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.network)
  network_.Mutable(index)->assign(value);
}
inline void ExecutionStep::set_network(int index, const char* value) {
  network_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.network)
}
inline void ExecutionStep::set_network(int index, const char* value, size_t size) {
  network_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.network)
}
inline ::std::string* ExecutionStep::add_network() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.ExecutionStep.network)
  return network_.Add();
}
inline void ExecutionStep::add_network(const ::std::string& value) {
  network_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.ExecutionStep.network)
}
inline void ExecutionStep::add_network(const char* value) {
  network_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.ExecutionStep.network)
}
inline void ExecutionStep::add_network(const char* value, size_t size) {
  network_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.ExecutionStep.network)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecutionStep::network() const {
  // @@protoc_insertion_point(field_list:caffe2.ExecutionStep.network)
  return network_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExecutionStep::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ExecutionStep.network)
  return &network_;
}

// optional int64 num_iter = 4;
inline bool ExecutionStep::has_num_iter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecutionStep::set_has_num_iter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecutionStep::clear_has_num_iter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecutionStep::clear_num_iter() {
  num_iter_ = GOOGLE_LONGLONG(0);
  clear_has_num_iter();
}
inline ::google::protobuf::int64 ExecutionStep::num_iter() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.num_iter)
  return num_iter_;
}
inline void ExecutionStep::set_num_iter(::google::protobuf::int64 value) {
  set_has_num_iter();
  num_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.num_iter)
}

// optional string criteria_network = 5 [deprecated = true];
inline bool ExecutionStep::has_criteria_network() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExecutionStep::set_has_criteria_network() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExecutionStep::clear_has_criteria_network() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExecutionStep::clear_criteria_network() {
  criteria_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_criteria_network();
}
inline const ::std::string& ExecutionStep::criteria_network() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.criteria_network)
  return criteria_network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_criteria_network(const ::std::string& value) {
  set_has_criteria_network();
  criteria_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.criteria_network)
}
inline void ExecutionStep::set_criteria_network(const char* value) {
  set_has_criteria_network();
  criteria_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.criteria_network)
}
inline void ExecutionStep::set_criteria_network(const char* value, size_t size) {
  set_has_criteria_network();
  criteria_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.criteria_network)
}
inline ::std::string* ExecutionStep::mutable_criteria_network() {
  set_has_criteria_network();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.criteria_network)
  return criteria_network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionStep::release_criteria_network() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.criteria_network)
  clear_has_criteria_network();
  return criteria_network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_allocated_criteria_network(::std::string* criteria_network) {
  if (criteria_network != NULL) {
    set_has_criteria_network();
  } else {
    clear_has_criteria_network();
  }
  criteria_network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), criteria_network);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.criteria_network)
}

// optional string report_net = 7;
inline bool ExecutionStep::has_report_net() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExecutionStep::set_has_report_net() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExecutionStep::clear_has_report_net() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExecutionStep::clear_report_net() {
  report_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_report_net();
}
inline const ::std::string& ExecutionStep::report_net() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.report_net)
  return report_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_report_net(const ::std::string& value) {
  set_has_report_net();
  report_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.report_net)
}
inline void ExecutionStep::set_report_net(const char* value) {
  set_has_report_net();
  report_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.report_net)
}
inline void ExecutionStep::set_report_net(const char* value, size_t size) {
  set_has_report_net();
  report_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.report_net)
}
inline ::std::string* ExecutionStep::mutable_report_net() {
  set_has_report_net();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.report_net)
  return report_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionStep::release_report_net() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.report_net)
  clear_has_report_net();
  return report_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_allocated_report_net(::std::string* report_net) {
  if (report_net != NULL) {
    set_has_report_net();
  } else {
    clear_has_report_net();
  }
  report_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_net);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.report_net)
}

// optional int32 report_interval = 8;
inline bool ExecutionStep::has_report_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExecutionStep::set_has_report_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExecutionStep::clear_has_report_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExecutionStep::clear_report_interval() {
  report_interval_ = 0;
  clear_has_report_interval();
}
inline ::google::protobuf::int32 ExecutionStep::report_interval() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.report_interval)
  return report_interval_;
}
inline void ExecutionStep::set_report_interval(::google::protobuf::int32 value) {
  set_has_report_interval();
  report_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.report_interval)
}

// optional int64 run_every_ms = 11;
inline bool ExecutionStep::has_run_every_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExecutionStep::set_has_run_every_ms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExecutionStep::clear_has_run_every_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExecutionStep::clear_run_every_ms() {
  run_every_ms_ = GOOGLE_LONGLONG(0);
  clear_has_run_every_ms();
}
inline ::google::protobuf::int64 ExecutionStep::run_every_ms() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.run_every_ms)
  return run_every_ms_;
}
inline void ExecutionStep::set_run_every_ms(::google::protobuf::int64 value) {
  set_has_run_every_ms();
  run_every_ms_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.run_every_ms)
}

// optional bool concurrent_substeps = 6;
inline bool ExecutionStep::has_concurrent_substeps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExecutionStep::set_has_concurrent_substeps() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExecutionStep::clear_has_concurrent_substeps() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExecutionStep::clear_concurrent_substeps() {
  concurrent_substeps_ = false;
  clear_has_concurrent_substeps();
}
inline bool ExecutionStep::concurrent_substeps() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.concurrent_substeps)
  return concurrent_substeps_;
}
inline void ExecutionStep::set_concurrent_substeps(bool value) {
  set_has_concurrent_substeps();
  concurrent_substeps_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.concurrent_substeps)
}

// optional string should_stop_blob = 9;
inline bool ExecutionStep::has_should_stop_blob() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ExecutionStep::set_has_should_stop_blob() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ExecutionStep::clear_has_should_stop_blob() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ExecutionStep::clear_should_stop_blob() {
  should_stop_blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_should_stop_blob();
}
inline const ::std::string& ExecutionStep::should_stop_blob() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.should_stop_blob)
  return should_stop_blob_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_should_stop_blob(const ::std::string& value) {
  set_has_should_stop_blob();
  should_stop_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.should_stop_blob)
}
inline void ExecutionStep::set_should_stop_blob(const char* value) {
  set_has_should_stop_blob();
  should_stop_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.should_stop_blob)
}
inline void ExecutionStep::set_should_stop_blob(const char* value, size_t size) {
  set_has_should_stop_blob();
  should_stop_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.should_stop_blob)
}
inline ::std::string* ExecutionStep::mutable_should_stop_blob() {
  set_has_should_stop_blob();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.should_stop_blob)
  return should_stop_blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionStep::release_should_stop_blob() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.should_stop_blob)
  clear_has_should_stop_blob();
  return should_stop_blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionStep::set_allocated_should_stop_blob(::std::string* should_stop_blob) {
  if (should_stop_blob != NULL) {
    set_has_should_stop_blob();
  } else {
    clear_has_should_stop_blob();
  }
  should_stop_blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), should_stop_blob);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.should_stop_blob)
}

// optional bool only_once = 10;
inline bool ExecutionStep::has_only_once() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ExecutionStep::set_has_only_once() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ExecutionStep::clear_has_only_once() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ExecutionStep::clear_only_once() {
  only_once_ = false;
  clear_has_only_once();
}
inline bool ExecutionStep::only_once() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.only_once)
  return only_once_;
}
inline void ExecutionStep::set_only_once(bool value) {
  set_has_only_once();
  only_once_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.only_once)
}

inline const ExecutionStep* ExecutionStep::internal_default_instance() {
  return &ExecutionStep_default_instance_.get();
}
// -------------------------------------------------------------------

// PlanDef

// optional string name = 1;
inline bool PlanDef::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanDef::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanDef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlanDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanDef::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.PlanDef.name)
}
inline void PlanDef::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PlanDef.name)
}
inline void PlanDef::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PlanDef.name)
}
inline ::std::string* PlanDef::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanDef::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.PlanDef.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PlanDef.name)
}

// repeated .caffe2.NetDef network = 2;
inline int PlanDef::network_size() const {
  return network_.size();
}
inline void PlanDef::clear_network() {
  network_.Clear();
}
inline const ::caffe2::NetDef& PlanDef::network(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.network)
  return network_.Get(index);
}
inline ::caffe2::NetDef* PlanDef::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.network)
  return network_.Mutable(index);
}
inline ::caffe2::NetDef* PlanDef::add_network() {
  // @@protoc_insertion_point(field_add:caffe2.PlanDef.network)
  return network_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >*
PlanDef::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.PlanDef.network)
  return &network_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >&
PlanDef::network() const {
  // @@protoc_insertion_point(field_list:caffe2.PlanDef.network)
  return network_;
}

// repeated .caffe2.ExecutionStep execution_step = 3;
inline int PlanDef::execution_step_size() const {
  return execution_step_.size();
}
inline void PlanDef::clear_execution_step() {
  execution_step_.Clear();
}
inline const ::caffe2::ExecutionStep& PlanDef::execution_step(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.execution_step)
  return execution_step_.Get(index);
}
inline ::caffe2::ExecutionStep* PlanDef::mutable_execution_step(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.execution_step)
  return execution_step_.Mutable(index);
}
inline ::caffe2::ExecutionStep* PlanDef::add_execution_step() {
  // @@protoc_insertion_point(field_add:caffe2.PlanDef.execution_step)
  return execution_step_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
PlanDef::mutable_execution_step() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.PlanDef.execution_step)
  return &execution_step_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
PlanDef::execution_step() const {
  // @@protoc_insertion_point(field_list:caffe2.PlanDef.execution_step)
  return execution_step_;
}

inline const PlanDef* PlanDef::internal_default_instance() {
  return &PlanDef_default_instance_.get();
}
// -------------------------------------------------------------------

// BlobProto

// optional string name = 1;
inline bool BlobProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BlobProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.name)
}
inline void BlobProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProto.name)
}
inline void BlobProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProto.name)
}
inline ::std::string* BlobProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.name)
}

// optional string type = 2;
inline bool BlobProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobProto::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& BlobProto::type() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.type)
}
inline void BlobProto::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProto.type)
}
inline void BlobProto::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProto.type)
}
inline ::std::string* BlobProto::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobProto::release_type() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.type)
}

// optional .caffe2.TensorProto tensor = 3;
inline bool BlobProto::has_tensor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProto::set_has_tensor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProto::clear_has_tensor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProto::clear_tensor() {
  if (tensor_ != NULL) tensor_->::caffe2::TensorProto::Clear();
  clear_has_tensor();
}
inline const ::caffe2::TensorProto& BlobProto::tensor() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.tensor)
  return tensor_ != NULL ? *tensor_
                         : *::caffe2::TensorProto::internal_default_instance();
}
inline ::caffe2::TensorProto* BlobProto::mutable_tensor() {
  set_has_tensor();
  if (tensor_ == NULL) {
    tensor_ = new ::caffe2::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.tensor)
  return tensor_;
}
inline ::caffe2::TensorProto* BlobProto::release_tensor() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.tensor)
  clear_has_tensor();
  ::caffe2::TensorProto* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_tensor(::caffe2::TensorProto* tensor) {
  delete tensor_;
  tensor_ = tensor;
  if (tensor) {
    set_has_tensor();
  } else {
    clear_has_tensor();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.tensor)
}

// optional bytes content = 4;
inline bool BlobProto::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobProto::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobProto::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobProto::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& BlobProto::content() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.content)
}
inline void BlobProto::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProto.content)
}
inline void BlobProto::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProto.content)
}
inline ::std::string* BlobProto::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobProto::release_content() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProto::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.content)
}

// optional .caffe2.QTensorProto qtensor = 5;
inline bool BlobProto::has_qtensor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobProto::set_has_qtensor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobProto::clear_has_qtensor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobProto::clear_qtensor() {
  if (qtensor_ != NULL) qtensor_->::caffe2::QTensorProto::Clear();
  clear_has_qtensor();
}
inline const ::caffe2::QTensorProto& BlobProto::qtensor() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.qtensor)
  return qtensor_ != NULL ? *qtensor_
                         : *::caffe2::QTensorProto::internal_default_instance();
}
inline ::caffe2::QTensorProto* BlobProto::mutable_qtensor() {
  set_has_qtensor();
  if (qtensor_ == NULL) {
    qtensor_ = new ::caffe2::QTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.qtensor)
  return qtensor_;
}
inline ::caffe2::QTensorProto* BlobProto::release_qtensor() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.qtensor)
  clear_has_qtensor();
  ::caffe2::QTensorProto* temp = qtensor_;
  qtensor_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_qtensor(::caffe2::QTensorProto* qtensor) {
  delete qtensor_;
  qtensor_ = qtensor;
  if (qtensor) {
    set_has_qtensor();
  } else {
    clear_has_qtensor();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.qtensor)
}

inline const BlobProto* BlobProto::internal_default_instance() {
  return &BlobProto_default_instance_.get();
}
// -------------------------------------------------------------------

// DBReaderProto

// optional string name = 1;
inline bool DBReaderProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBReaderProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBReaderProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBReaderProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DBReaderProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.name)
}
inline void DBReaderProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.name)
}
inline void DBReaderProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.name)
}
inline ::std::string* DBReaderProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBReaderProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.name)
}

// optional string source = 2;
inline bool DBReaderProto::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBReaderProto::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBReaderProto::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBReaderProto::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DBReaderProto::source() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.source)
}
inline void DBReaderProto::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.source)
}
inline void DBReaderProto::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.source)
}
inline ::std::string* DBReaderProto::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBReaderProto::release_source() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.source)
}

// optional string db_type = 3;
inline bool DBReaderProto::has_db_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBReaderProto::set_has_db_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBReaderProto::clear_has_db_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBReaderProto::clear_db_type() {
  db_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_type();
}
inline const ::std::string& DBReaderProto::db_type() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.db_type)
  return db_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_db_type(const ::std::string& value) {
  set_has_db_type();
  db_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.db_type)
}
inline void DBReaderProto::set_db_type(const char* value) {
  set_has_db_type();
  db_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.db_type)
}
inline void DBReaderProto::set_db_type(const char* value, size_t size) {
  set_has_db_type();
  db_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.db_type)
}
inline ::std::string* DBReaderProto::mutable_db_type() {
  set_has_db_type();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.db_type)
  return db_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBReaderProto::release_db_type() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.db_type)
  clear_has_db_type();
  return db_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_allocated_db_type(::std::string* db_type) {
  if (db_type != NULL) {
    set_has_db_type();
  } else {
    clear_has_db_type();
  }
  db_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.db_type)
}

// optional string key = 4;
inline bool DBReaderProto::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBReaderProto::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBReaderProto::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBReaderProto::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& DBReaderProto::key() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.key)
}
inline void DBReaderProto::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.key)
}
inline void DBReaderProto::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.key)
}
inline ::std::string* DBReaderProto::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBReaderProto::release_key() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBReaderProto::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.key)
}

inline const DBReaderProto* DBReaderProto::internal_default_instance() {
  return &DBReaderProto_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe2::TensorProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe2::TensorProto_DataType>() {
  return ::caffe2::TensorProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::caffe2::DeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe2::DeviceType>() {
  return ::caffe2::DeviceType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe2_2fproto_2fcaffe2_2eproto__INCLUDED
